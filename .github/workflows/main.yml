name: Build Shadow AI GUI - Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:  # Allow manual triggering

env:
  PROJECT_NAME: "ShadowAI"
  PYTHON_VERSION: "3.12.5"

jobs:
  build-gui:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Display Python version
      run: |
        python --version
        pip --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        pip install customtkinter
        pip install pygame
        pip install psutil

    - name: Test GUI imports
      run: |
        python -c "
        try:
            import customtkinter
            import openai
            import pygame
            import psutil
            import requests
            import asyncio
            import threading
            print('✅ All GUI dependencies imported successfully')
            
            import sys
            sys.path.append('.')
            from shadow_core.gui import ShadowGUI
            from shadow_core.brain import ShadowBrain
            print('✅ Project GUI modules imported successfully')
            
        except ImportError as e:
            print(f'❌ Import error: {e}')
            exit(1)
        except Exception as e:
            print(f'⚠️  Warning: {e}')
        "

    - name: Build GUI application with PyInstaller
      run: |
        python -m PyInstaller `
          --clean `
          --noconfirm `
          --onefile `
          --windowed `
          --name=${{ env.PROJECT_NAME }} `
          --add-data="shadow_core;shadow_core" `
          --add-data="config.example.py;." `
          --hidden-import=customtkinter `
          --hidden-import=openai `
          --hidden-import=pygame `
          --hidden-import=psutil `
          --hidden-import=requests `
          --hidden-import=asyncio `
          --hidden-import=threading `
          --hidden-import=concurrent.futures `
          --hidden-import=queue `
          run_shadow_gui.py

    - name: Create distribution package
      run: |
        # Create distribution folder
        $version = "1.0.0"
        $distFolder = "${{ env.PROJECT_NAME }}-GUI-v$version"
        New-Item -ItemType Directory -Path $distFolder -Force
        
        # Copy the single executable
        Copy-Item "dist/${{ env.PROJECT_NAME }}.exe" "$distFolder/${{ env.PROJECT_NAME }}.exe" -Force
        
        # Copy configuration files
        Copy-Item "config.example.py" "$distFolder/config.py" -Force
        Copy-Item "README.md" "$distFolder/" -Force
        Copy-Item "LICENSE" "$distFolder/" -Force
        
        # Create simplified README
        $readmeContent = @"
# Shadow AI - GUI Application

Version: $version
Python: ${{ env.PYTHON_VERSION }}
Build Date: $(Get-Date -Format "yyyy-MM-dd")

## Quick Sta

GitHub: https://github.com/${{ github.repository }}

## License

MIT License - See LICENSE file for details.
"@
        $readmeContent | Out-File -FilePath "$distFolder/README.txt" -Encoding UTF8

        # Create simple launch script
        $batchContent = @"
@echo off
echo Starting Shadow AI...
echo Make sure you have configured config.py with your API keys!
timeout /t 2 /nobreak >nul
start "" "${{ env.PROJECT_NAME }}.exe"
"@
        $batchContent | Out-File -FilePath "$distFolder/Start Shadow AI.bat" -Encoding ASCII

    - name: Create final ZIP package
      run: |
        $version = "1.0.0"
        $distFolder = "${{ env.PROJECT_NAME }}-GUI-v$version"
        Compress-Archive -Path $distFolder/* -DestinationPath "$distFolder.zip" -Force
        echo "Created: $distFolder.zip"

    - name: Upload GUI artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-GUI-Windows
        path: ${{ env.PROJECT_NAME }}-GUI-v*.zip
        retention-days: 30

    - name: Display build summary
      run: |
        echo "GUI Build Completed Successfully!"
        echo "Project: ${{ env.PROJECT_NAME }}"
        echo "Python: ${{ env.PYTHON_VERSION }}"
        echo "Platform: Windows"

  create-gui-release:
    needs: build-gui
    runs-on: windows-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download GUI artifact
      uses: actions/download-artifact@v4
      with:
        path: release-assets

    - name: Prepare release asset
      run: |
        $artifact = Get-ChildItem -Path "release-assets" -Recurse -Include "*.zip" | Select-Object -First 1
        if ($artifact) {
            $newName = "ShadowAI-GUI-Windows.zip"
            Copy-Item $artifact.FullName $newName
            echo "Release asset ready: $newName"
        } else {
            echo "No GUI artifact found!"
            exit 1
        }

    - name: Upload to GitHub release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ShadowAI-GUI-Windows.zip
        asset_name: ShadowAI-GUI-Windows.zip
        asset_content_type: application/zip

    - name: Display release info
      run: |
        echo "Release Published!"
        echo "Tag: ${{ github.event.release.tag_name }}"
        echo "Python: ${{ env.PYTHON_VERSION }}"
